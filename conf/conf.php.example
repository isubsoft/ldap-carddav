<?php

$config = [];

// Set temporary files directory. This can either be an absolute path or a 
// path relative to base directory of the application. Use %systempdir as placeholder for 
// system temp directory path. To use %systempdir as a literal use %%systempdir
// Remember %systempdir is an absolute path.
// Defaults to 'tmp' directory relative to base directory of the application.
//   $config['tmpdir'] = '%systempdir';

// Set data directory path of the application if it is different from default.
// This can either be an absolute path or a path relative to base directory of the application.
// Defaults to 'data' directory relative to base directory of the application.
//   $config['datadir'] = '/var/lib/ldap_carddav';

// Base URI for this application. Default is '/server.php'.
// If you have configured clean URLs in your HTTP server configuration then, uncomment the below and update
// if required.
//  $config['app']['base_uri'] = '/';

// Set application environment. If set to 'prod' certain application features are turned off which are not suitable
// or unsafe for production environment. Defaults to null.
//  $config['app']['env'] = 'prod';

// Few CardDAV clients do not implement WebDAV sync specifications correctly leading to broken WebDAV sync.
// You can enable WebDAV sync globally if your CardDAV client is known to be compliant with WebDAV sync specifications.
// Default is false.
//  $config['app']['enable_incremental_sync'] = true;

// Set global maximum size (in bytes) of request payload which can be accepted.
// Default is null which means app internal default value will be used.
//  $config['app']['max_payload_size'] = null;

// The DSN string below can use %datadir as placeholder for the data directory path of the application.
// Remember %datadir is an absolute directory path. To use %datadir as a literal use %%datadir
$config['sync_database'] = [
	// See https://www.php.net/manual/en/pdo.drivers.php for setting 
	// database driver specific dsn, username, password and options below.
	'dsn' => 'sqlite:%datadir/sync/syncdb/sqlite/cards.db',
	'username' => '', // Defaults to null.
	'password' => '', // Defaults to null.
	'options' => [], // Currently only PDO::ATTR_TIMEOUT attribute is accepted. Defaults to empty array.
	'init_commands' => [] // Database specific statements to be executed before database is used 
												// by the application. Can be used to set some dynamic database parameters which otherwise
												// cannot be set via other means.
												// WARNING: Do not use statements which violate the requirements for sync database.
												// Currently executes sqlite PRAGMA statements only.
												// Defaults to empty array.
];

$config['server']['ldap'] = [
  'host'         				=> '<hostname>', // If not set then system default LDAP URI will be used
	// 'port'          			=> 389, // If not set then default ports for ldap and ldaps schemes will be used.
  // 'ldap_version'  			=> 3, // If not set then LDAPv3 will be used. LDAPv2 or below are not supported.
  'network_timeout' 		=> 10, // The timeout (in seconds) for connect + bind attempts. 
  														 // This is only supported in PHP >= 5.3.0 with OpenLDAP 2.x
  'connection_security'	=> 'none' 	// none (default): No connection security will be established
  																	// secure: Use secure (ldaps) protocol to connect to the server
  																	// starttls: Use starttls protocol for security
];

$config['auth']['ldap'] = [
	// Authentication realm. Defaults to 'isubsoft/ldap-carddav'.
	// 'realm' => '',

  // -- The following placeholders are available to be used in bind_dn, bind_pass and search_filter as applicable
  // %u  - Username sent by client for authentication
  // %p  - Password sent by client for authentication
  // %dn - DN as returned by LDAP search for bind authentication
  
  'base_dn'       => 'ou=People,dc=example,dc=org', // Default base DN for searches
  'bind_dn'       => '%dn',
  'bind_pass'     => '%p',
  
  // It's possible to bind to a DN from a search result
  'search_base_dn' => '', // Provide a separate base DN for search if different from 'base_dn' above else leave blank.
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=%u))',   // e.g. '(&(objectClass=posixAccount)(uid=%u))'
  // DN and password to bind as before searching for bind DN, if anonymous search is not allowed
  'search_bind_dn' => 'cn=admin,ou=People,dc=example,dc=org',
  'search_bind_pw' => '<secret>',
  'scope' => 'list' // search mode: sub|base|list
];

$config['principal']['ldap'] = [
  // -- The following placeholders are available to be used in 'search_filter'
  // %u  - Username sent by client for authentication
  
  'base_dn'       => 'ou=People,dc=example,dc=org', // Default base DN for searches
  
  // It's possible to search for principal DN(s)
  'search_base_dn' => '', // Provide a separate base DN for search if different from 'base_dn' above else leave blank.
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=*))',   // Filter criteria for valid principals.
  
  // DN and password to bind as before searching for pricipal DN(s), if anonymous search is not allowed
  'search_bind_dn' => 'cn=admin,ou=People,dc=example,dc=org',
  'search_bind_pw' => '<secret>',
  'scope' => 'list', // search mode: sub|base|list

	// Principal property => LDAP user attribute field map (Use primary name of backend field only and not their alias name here)
  'fieldmap' => [	'id' => 'uid', 					// 'id' is equal to the username used by the principal during authentication.
  															 					// Make sure it is mapped to an appropriate user attribute in LDAP.
  								'displayname' => 'cn', 	// 'displayname' is a commonly used name of the principal.
  								'mail' => 'mail' 				// 'mail' is an email id of the principal.
  							]
];

$config['card']['addressbook']['ldap']['me'] = [
	'name'          	=> 'Me',
  'description'     => 'My contact',
    
	// 'user_specific' and 'writable' values are used as initialization parameters for the sync database. 
	// Once the sync database has been initialized changing the values here to any conflicting values will 
	// lead to this application not processing requests for this address book.
	'user_specific' 	=> true, // If this is true username placeholder can be used in applicable places
	'writable'     	 	=> true, // If true (default) then new contacts can be created and existing ones can be updated and deleted
	
	// Many clients do not use WebDAV sync to get address book changes leading to a full refresh 
	// of the address book from backend every time they sync their address book. Set the below to 
	// prevent full address book refresh from backend at least for this interval (in seconds). 
	// Defaults to four hours.
	//  'full_refresh_interval' => 14400,

	// For WebDAV sync clients there is no way to know about contacts which are deleted in the backend by 
	// some other process. Set the below to delete contacts (which are deleted directly in the backend) in 
	// incremental sync clients at this interval at worst. A larger value will lead to better performance. 
	// Defaults to a day.
	//  'force_full_sync_interval' => 86400,
	
	// Maximum size of a card (in bytes) which is accepted for create/update. Defaults to 16 KiB.
	//  'max_size'				=> 16384,
	
  // The following placeholders are available to be used in 'base_dn' and 'search_filter' below as applicable
  // %u  - Username sent by client for authentication
  // %dn - DN as returned by LDAP search for address book DN
  
	'base_dn'       	=> '%dn', // Base DN for contact search
	
	// LDAP filter to be used to search for contacts
	'filter'        	=> '(objectClass=inetOrgPerson)',
	
	// Bind user to search/read/write contacts. If 'bind_dn' and 'bind_pass' are not provided below 
	// then LDAP connection using parameters provided in $config['auth']['ldap'] is used to obtain backend data. 
	// This bind user must have read access to entryUUID, createTimestamp and modifyTimestamp operational attributes 
	// of all contacts in the address book additionally.
	'bind_dn'       	=> 'cn=admin,ou=People,dc=example,dc=org',
	'bind_pass'     	=> '<secret>',
	
	// Sync LDAP bind user can be used for contact searches if there are size limits on 'bind_dn' in LDAP.
	// Read and writes will still be performed by 'bind_dn'. 'sync_bind_dn' should have liberal or no size 
	// limits and must have read access to entryUUID, createTimestamp and modifyTimestamp attribute of all 
	// contacts in the address book. Access to other contact attributes is not required by this user.
	//  'sync_bind_dn'       => 'cn=carddavsync,ou=People,dc=example,dc=org',
	//  'sync_bind_pw'     	=> '<secret>',
	
	'scope'         => 'base',   // search mode: sub|base|list
	
  // It's possible to find the base of an address book DN from a search result. Useful only if the address book is user specific.
  'search_base_dn' => 'ou=People,dc=example,dc=org',
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=%u))',   // e.g. '(&(objectClass=posixAccount)(uid=%u))'
	'search_scope'   => 'list',   // search mode: sub|base|list
	
	// Backend data update policy. Valid options are below.
	// merge (default)  - Would only replace backend contact attibutes present in field map here and 
	//                    leave others intact.
	// replace          - Would replace whole backend contact with attibutes present in 
	//                    field map here. WARNING: This option may lead to loss of contact attributes 
	//                    in the backend which are not present in field map here.
	//  'backend_data_update_policy' => 'merge',
	
	// If writable is true then these fields need to be populated:
	// LDAP_Object_Classes, required_fields, LDAP_rdn
	'LDAP_Object_Classes' => ['inetOrgPerson'],
	'required_fields'     => ['cn', 'sn'],
	'LDAP_rdn'      			=> 'uid',

	// Backend contact field acl. By default no access is denied to any backend field.
	// 'eval' can have following values
	// r (default) - Evaluate 'list' as read only fields
	// w           - Evaluate 'list' as writable fields
	'field_acl'     => 	[ 
												'eval' => 'w',
												'list' => ['displayName', 'homePhone', 'telephoneNumber', 'facsimileTelephoneNumber', 'pager', 'mobile', 'homePostalAddress', 'preferredLanguage']
											],

	// vCard    => LDAP contact field map (Use primary name of backend field and not their alias name here)
	// To map a composite value property to individual backend fields check conf/vcard_metadata.json for 
	// logical names of the components of a composite value.
	// vCard property and the corresponding parameter match should be according to vCard v4.0 specifications only
  'fieldmap'      => [
    'FN'            => ['field_name' => 'cn'],

    'N'							=> ['field_name' => [
    																			'last_name' 	=> 'sn', 
    																			'first_name' 	=> 'givenName'
    																		]
    									 ],

		'EMAIL'         => ['field_name' => 'mail'],

		'ORG'         	=> ['field_name' => [
																					'org_name' 			=> 'o', 
																					'org_unit_name' => 'ou'
																				]
											 ],

    'TITLE'         => ['field_name' => 'title'],
    
    'ROLE'        	=> ['field_name' => 'employeeType'],

    'NICKNAME'      => ['field_name' => 'displayName'],

		'PHOTO'         => 	[
    											// Mapping profile picture
													[
														'field_name' => 'jpegPhoto',
				                  	'field_data_format' => 'binary',
				                  	'field_data_mediatype' => ['image/jpeg', 'image/png'], // List of mediatype which a 
				                  																												 // binary backend field will accept
				                  ]
                       	],

    'NOTE'        	=> 	['field_name' => 'description'],

    'TEL'						=> 	[
    											// Mapping pager number
				                  [	
				                  	'field_name' => 'pager',
						                'parameters' => ['TYPE' => 'pager']
				                  ],
				                  
    											// Mapping fax number
		                      [
		                      	'field_name' => 'facsimileTelephoneNumber',
		                        'parameters' => [
		                        									['TYPE' => ['fax', 'work']],
		                        									['TYPE' => 'fax'],
		                        								],
		                    	],
		                    	
    											// Mapping mobile number
				                  [
				                  	'field_name' => 'mobile',
				                    'parameters' => ['TYPE' => 'cell']
				                  ],
				                  
    											// Mapping home telephone number
    											[
		  											'field_name' => 'homePhone',
		                        'parameters' => [ 
		                                          ['TYPE' => 'home'],
		                        									['TYPE' => 'home', 'PREF' => '1']
		                                        ],
						                'reverse_map_parameter_index' => 1
                          ],
                          
    											// Mapping work telephone number
                          [	
                          	'field_name' => 'telephoneNumber',
		                        'parameters' => [ 
		                                          ['TYPE' => 'work'],
		                        									['TYPE' => 'work', 'PREF' => '1'],
		                                          null
		                                        ],
						                'reverse_map_parameter_index' => 1
                          ],
                     ],
                     
      'ADR'         => [
		  										// Mapping home postal address
		    									[
														'field_name' => 'homePostalAddress',
				                    'parameters' => ['TYPE' => 'home'],
				                    'map_component_separator' => '$'
		                      ],
		                      
		  										// Mapping other postal address
		    									[
														'field_name' => 'postalAddress',
				                    'parameters' => [null],
				                    'map_component_separator' => '$'
		                      ],

		  										// Mapping location
		                      [
		     										'field_name' => [
		     																			'po_box'			=> 'postOfficeBox',
		     																			'street' 			=> 'street',
		     																			'locality' 		=> 'l',
		     																			'province' 		=> 'st', 
		     																			'postal_code' => 'postalCode'
		     																		],
		                        'parameters' => ['TYPE' => 'work']
		                      ]
                       ],

      'LANG'        => ['field_name' => 'preferredLanguage']
	],
	
	// If writable is true then these fields need to be populated:
	// group_LDAP_Object_Classes, group_required_fields, group_LDAP_rdn
	'group_LDAP_Object_Classes' => ['groupOfNames'],
	'group_required_fields'     => ['cn', 'member'],
	'group_LDAP_rdn'      	    => 'cn',
	
	// Backend contact field acl. By default no access is denied to any backend field.
	// 'eval' can have following values
	// r (default) - Evaluate 'list' as read only fields
	// w           - Evaluate 'list' as writable fields
	//  'group_field_acl' => 	[ 
	//													'eval' => 'r',
	//													'list' => []
	//												],
	
	// Backend field which points to the contact which is member of this contact group  
	'group_member_map'          => [ 'MEMBER'      => [ 'field_name' => 'member' ] ],
	
	// vCard    => LDAP contact field map (Use primary name of backend field and not their alias name here)
	// To map a composite value property to an individual backend field check conf/vcard_metadata.json for logical 
	// names of the components of a composite value
	// vCard property and the corresponding parameter match should be according to vCard v4.0 specifications only
	'group_fieldmap'            => [     
		 'FN'          => [	'field_name' => 'cn'],
	 	
		 'NOTE'        => [	'field_name' => 'description']
	 ]
];

$config['card']['addressbook']['ldap']['global'] = [
	'name'          	=> 'Global Address Book',
  'description'     => 'Global address book',
    
	// 'user_specific' and 'writable' values are used as initialization parameters for the sync database. 
	// Once the sync database has been initialized changing the values here to any conflicting values will 
	// lead to this application not processing requests for this address book.
	'user_specific' 	=> false, // If this is true username placeholder can be used in applicable places
	'writable'     	 	=> false, // If true (default) then new contacts can be created and existing ones can be updated and deleted
	
	// Many clients do not use WebDAV sync to get address book changes leading to a full refresh 
	// of the address book from backend every time they sync their address book. Set the below to 
	// prevent full address book refresh from backend at least for this interval (in seconds). 
	// Defaults to four hours.
	//  'full_refresh_interval' => 14400,

	// For WebDAV sync clients there is no way to know about contacts which are deleted in the backend by 
	// some other process. Set the below to delete contacts (which are deleted directly in the backend) in 
	// incremental sync clients at this interval at worst. A larger value will lead to better performance. 
	// Defaults to a day.
	//  'force_full_sync_interval' => 86400,
	
	// Maximum size of a card (in bytes) which is accepted for create/update. Defaults to 16 KiB.
	//  'max_size'				=> 16384,
	
  // The following placeholders are available to be used in 'base_dn' and 'search_filter' below as applicable
  // %u  - Username sent by client for authentication
  // %dn - DN as returned by LDAP search for address book DN
  
	'base_dn'       	=> 'ou=People,dc=example,dc=org', // Base DN for contact search
	
	// LDAP filter to be used to search for contacts
	'filter'        	=> '(|(objectClass=inetOrgPerson)(objectClass=groupOfNames))',
	
	// Bind user to search/read/write contacts. If 'bind_dn' and 'bind_pass' are not provided below 
	// then LDAP connection using parameters provided in $config['auth']['ldap'] is used to obtain backend data. 
	// This bind user must have read access to entryUUID, createTimestamp and modifyTimestamp operational attributes 
	// of all contacts in the address book additionally.
	'bind_dn'       	=> 'cn=admin,ou=People,dc=example,dc=org',
	'bind_pass'     	=> '<secret>',
	
	// Sync LDAP bind user can be used for contact searches if there are size limits on 'bind_dn' in LDAP.
	// Read and writes will still be performed by 'bind_dn'. 'sync_bind_dn' should have liberal or no size 
	// limits and must have read access to entryUUID, createTimestamp and modifyTimestamp attribute of all 
	// contacts in the address book. Access to other contact attributes is not required by this user.
	//  'sync_bind_dn'       => 'cn=carddavsync,ou=People,dc=example,dc=org',
	//  'sync_bind_pw'     	=> '<secret>',
	
	'scope'         => 'list',   // search mode: sub|base|list
	
  // It's possible to find the base of an address book DN from a search result. Useful only if the address book is user specific.
  'search_base_dn' => 'ou=People,dc=example,dc=org',
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=%u))',   // e.g. '(&(objectClass=posixAccount)(uid=%u))'
	'search_scope'   => 'list',   // search mode: sub|base|list
	
	// Backend data update policy. Valid options are below.
	// merge (default)  - Would only replace backend contact attibutes present in field map here and 
	//                    leave others intact.
	// replace          - Would replace whole backend contact with attibutes present in 
	//                    field map here. WARNING: This option may lead to loss of contact attributes 
	//                    in the backend which are not present in field map here.
	//  'backend_data_update_policy' => 'merge',
	
	// If writable is true then these fields need to be populated:
	// LDAP_Object_Classes, required_fields, LDAP_rdn
	'LDAP_Object_Classes' => ['inetOrgPerson'],
	'required_fields'     => ['cn', 'sn'],
	'LDAP_rdn'      			=> 'uid',

	// Backend contact field acl. By default no access is denied to any backend field.
	// 'eval' can have following values
	// r (default) - Evaluate 'list' as read only fields
	// w           - Evaluate 'list' as writable fields
	//  'field_acl'     => 	[ 
	//												'eval' => 'r',
	//												'list' => []
	//											],

	// vCard    => LDAP contact field map (Use primary name of backend field and not their alias name here)
	// To map a composite value property to individual backend fields check conf/vcard_metadata.json for 
	// logical names of the components of a composite value.
	// vCard property and the corresponding parameter match should be according to vCard v4.0 specifications only
  'fieldmap'      => [
    'FN'            => ['field_name' => 'cn'],

    'N'							=> ['field_name' => [
    																			'last_name' 	=> 'sn', 
    																			'first_name' 	=> 'givenName'
    																		]
    									 ],

		'EMAIL'         => ['field_name' => 'mail'],

		'ORG'         	=> ['field_name' => [
																					'org_name' 			=> 'o', 
																					'org_unit_name' => 'ou'
																				]
											 ],

    'TITLE'         => ['field_name' => 'title'],
    
    'ROLE'        	=> ['field_name' => 'employeeType'],

    'NICKNAME'      => ['field_name' => 'displayName'],

		'PHOTO'         => 	[
    											// Mapping profile picture
													[
														'field_name' => 'jpegPhoto',
				                  	'field_data_format' => 'binary',
				                  	'field_data_mediatype' => ['image/jpeg', 'image/png'], // List of mediatype which a 
				                  																												 // binary backend field will accept
				                  ]
                       	],

    'NOTE'        	=> 	['field_name' => 'description'],

    'TEL'						=> 	[
    											// Mapping pager number
				                  [	
				                  	'field_name' => 'pager',
						                'parameters' => ['TYPE' => 'pager']
				                  ],
				                  
    											// Mapping fax number
		                      [
		                      	'field_name' => 'facsimileTelephoneNumber',
		                        'parameters' => [
		                        									['TYPE' => ['fax', 'work']],
		                        									['TYPE' => 'fax'],
		                        								],
		                    	],
		                    	
    											// Mapping mobile number
				                  [
				                  	'field_name' => 'mobile',
				                    'parameters' => ['TYPE' => 'cell']
				                  ],
				                  
    											// Mapping home telephone number
    											[
		  											'field_name' => 'homePhone',
		                        'parameters' => [ 
		                                          ['TYPE' => 'home'],
		                        									['TYPE' => 'home', 'PREF' => '1']
		                                        ],
						                'reverse_map_parameter_index' => 1
                          ],
                          
    											// Mapping work telephone number
                          [	
                          	'field_name' => 'telephoneNumber',
		                        'parameters' => [ 
		                                          ['TYPE' => 'work'],
		                        									['TYPE' => 'work', 'PREF' => '1'],
		                                          null
		                                        ],
						                'reverse_map_parameter_index' => 1
                          ],
                     ],
                     
      'ADR'         => [
		  										// Mapping home postal address
		    									[
														'field_name' => 'homePostalAddress',
				                    'parameters' => ['TYPE' => 'home'],
				                    'map_component_separator' => '$'
		                      ],
		                      
		  										// Mapping other postal address
		    									[
														'field_name' => 'postalAddress',
				                    'parameters' => [null],
				                    'map_component_separator' => '$'
		                      ],

		  										// Mapping location
		                      [
		     										'field_name' => [
		     																			'po_box'			=> 'postOfficeBox',
		     																			'street' 			=> 'street',
		     																			'locality' 		=> 'l',
		     																			'province' 		=> 'st', 
		     																			'postal_code' => 'postalCode'
		     																		],
		                        'parameters' => ['TYPE' => 'work']
		                      ]
                       ],

      'LANG'        => ['field_name' => 'preferredLanguage']
	],
	
	// If writable is true then these fields need to be populated:
	// group_LDAP_Object_Classes, group_required_fields, group_LDAP_rdn
	'group_LDAP_Object_Classes' => ['groupOfNames'],
	'group_required_fields'     => ['cn', 'member'],
	'group_LDAP_rdn'      	    => 'cn',
	
	// Backend contact field acl. By default no access is denied to any backend field.
	// 'eval' can have following values
	// r (default) - Evaluate 'list' as read only fields
	// w           - Evaluate 'list' as writable fields
	//  'group_field_acl' => 	[ 
	//													'eval' => 'r',
	//													'list' => []
	//												],
	
	// Backend field which points to the contact which is member of this contact group  
	'group_member_map'          => [ 'MEMBER'      => [ 'field_name' => 'member' ] ],
	
	// vCard    => LDAP contact field map (Use primary name of backend field and not their alias name here)
	// To map a composite value property to an individual backend field check conf/vcard_metadata.json for logical 
	// names of the components of a composite value
	// vCard property and the corresponding parameter match should be according to vCard v4.0 specifications only
	'group_fieldmap'            => [     
		 'FN'          => [	'field_name' => 'cn'],
	 	
		 'NOTE'        => [	'field_name' => 'description']
	 ]
];

$config['card']['addressbook']['ldap']['personal'] = [
	'name'          	=> 'Personal Address Book',
  'description'     => 'Personal address book of the user',

	// 'user_specific' and 'writable' values are used as initialization parameters for the sync database. 
	// Once the sync database has been initialized changing the values here to any conflicting values will 
	// lead to this application not processing requests for this address book.
	'user_specific' 	=> true, 	// If this is true username placeholder can be used in applicable places
	'writable'     	 	=> true, 	// If true (default) then new contacts can be created and existing ones can be updated and deleted

	// Many clients do not use WebDAV sync to get address book changes leading to a full refresh 
	// of the address book from backend every time they sync their address book. Set the below to 
	// prevent full address book refresh from backend at least for this interval (in seconds). 
	// Defaults to four hours.
	//  'full_refresh_interval' => 14400,

	// For WebDAV sync clients there is no way to know about contacts which are deleted in the backend by 
	// some other process. Set the below to delete contacts (which are deleted directly in the backend) in 
	// incremental sync clients at this interval at worst. A larger value will lead to better performance. 
	// Defaults to a day.
	//  'force_full_sync_interval' => 86400,
	
	// Maximum size of a card (in bytes) which is accepted for create/update. Defaults to 16 KiB.
	//  'max_size'				=> 16384,
	
  // The following placeholders are available to be used in 'base_dn' and 'search_filter' below as applicable
  // %u  - Username sent by client for authentication
  // %dn - DN as returned by LDAP search for address book DN
  
	'base_dn'       	=> 'ou=Address Book,%dn', // Base DN for contact search
	
	// LDAP filter to be used to search for contacts	
	'filter'        	=> '(|(objectClass=inetOrgPerson)(objectClass=groupOfNames))',
	
	// Bind user to search/read/write contacts. If 'bind_dn' and 'bind_pass' are not provided below 
	// then LDAP connection using parameters provided in $config['auth']['ldap'] is used to obtain backend data. 
	// This bind user must have read access to entryUUID, createTimestamp and modifyTimestamp operational attributes 
	// of all contacts in the address book additionally.
	//  'bind_dn'       	=> '',
	//  'bind_pass'     => '',
	
	// Sync LDAP bind user can be used for contact searches if there are size limits on 'bind_dn' in LDAP.
	// Read and writes will still be performed by 'bind_dn'. 'sync_bind_dn' should have liberal or no size 
	// limits and must have read access to entryUUID, createTimestamp and modifyTimestamp attribute of all 
	// contacts in the address book. Access to other contact attributes is not required by this user.
	//  'sync_bind_dn'       	=> 'cn=carddavsync,ou=People,dc=example,dc=org',
	//  'sync_bind_pw'     	=> '<secret>',
	
	'scope'         => 'list',   // search mode: sub|base|list
	
  // It's possible to find the base of an address book DN from a search result. Useful only if the address book is user specific.
  'search_base_dn' => 'ou=People,dc=example,dc=org',
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=%u))',   // e.g. '(&(objectClass=posixAccount)(uid=%u))'
	'search_scope'   => 'list',   // search mode: sub|base|list
	
	// Backend data update policy. Valid options are below.
	// merge (default)  - Would only replace backend contact attibutes present in field map here and 
	//                    leave others intact.
	// replace          - Would replace whole backend contact with attibutes present in 
	//                    field map here. WARNING: This option may lead to loss of contact attributes 
	//                    in the backend which are not present in field map here.
	//  'backend_data_update_policy' => 'merge',

	// If writable is true then these fields need to be populated:
	// LDAP_Object_Classes, required_fields, LDAP_rdn
	'LDAP_Object_Classes' => ['inetOrgPerson'],
	'required_fields'     => ['cn', 'sn'],
	'LDAP_rdn'      			=> 'cn',

	// Backend contact field acl. By default no access is denied to any backend field.
	// 'eval' can have following values
	// r (default) - Evaluate 'list' as read only fields
	// w           - Evaluate 'list' as writable fields
	//  'field_acl'     => 	[ 
	//												'eval' => 'r',
	//												'list' => []
	//											],
	
	// vCard    => LDAP contact field map (Use primary name of backend field and not their alias name here)
	// To map a composite value property to individual backend fields check conf/vcard_metadata.json for 
	// logical names of the components of a composite value.
	// vCard property and the corresponding parameter match should be according to vCard v4.0 specifications only
  'fieldmap'      => [
    'FN'            => ['field_name' => 'cn'],

    'N'							=> ['field_name' => [
    																			'last_name' 	=> 'sn', 
    																			'first_name' 	=> 'givenName'
    																		]
    									 ],

		'EMAIL'         => ['field_name' => 'mail'],

		'ORG'         	=> ['field_name' => [
																					'org_name' 			=> 'o', 
																					'org_unit_name' => 'ou'
																				]
											 ],

    'TITLE'         => ['field_name' => 'title'],
    
    'ROLE'        	=> ['field_name' => 'employeeType'],

    'NICKNAME'      => ['field_name' => 'displayName'],

		'PHOTO'         => 	[
    											// Mapping profile picture
													[
														'field_name' => 'jpegPhoto',
				                  	'field_data_format' => 'binary',
				                  	'field_data_mediatype' => ['image/jpeg', 'image/png'], // List of mediatype which a 
				                  																												 // binary backend field will accept
				                  ]
                       	],

    'NOTE'        	=> 	['field_name' => 'description'],

    'TEL'						=> 	[
    											// Mapping pager number
				                  [	
				                  	'field_name' => 'pager',
						                'parameters' => ['TYPE' => 'pager']
				                  ],
				                  
    											// Mapping fax number
		                      [
		                      	'field_name' => 'facsimileTelephoneNumber',
		                        'parameters' => [
		                        									['TYPE' => ['fax', 'work']],
		                        									['TYPE' => 'fax'],
		                        								],
		                    	],
		                    	
    											// Mapping mobile number
				                  [
				                  	'field_name' => 'mobile',
				                    'parameters' => ['TYPE' => 'cell']
				                  ],
				                  
    											// Mapping home telephone number
    											[
		  											'field_name' => 'homePhone',
		                        'parameters' => [ 
		                                          ['TYPE' => 'home'],
		                        									['TYPE' => 'home', 'PREF' => '1']
		                                        ],
						                'reverse_map_parameter_index' => 1
                          ],
                          
    											// Mapping work telephone number
                          [	
                          	'field_name' => 'telephoneNumber',
		                        'parameters' => [ 
		                                          ['TYPE' => 'work'],
		                        									['TYPE' => 'work', 'PREF' => '1'],
		                                          null
		                                        ],
						                'reverse_map_parameter_index' => 1
                          ],
                     ],
                     
      'ADR'         => [
		  										// Mapping home postal address
		    									[
														'field_name' => 'homePostalAddress',
				                    'parameters' => ['TYPE' => 'home'],
				                    'map_component_separator' => '$'
		                      ],
		                      
		  										// Mapping other postal address
		    									[
														'field_name' => 'postalAddress',
				                    'parameters' => [null],
				                    'map_component_separator' => '$'
		                      ],

		  										// Mapping location
		                      [
		     										'field_name' => [
		     																			'po_box'			=> 'postOfficeBox',
		     																			'street' 			=> 'street',
		     																			'locality' 		=> 'l',
		     																			'province' 		=> 'st', 
		     																			'postal_code' => 'postalCode'
		     																		],
		                        'parameters' => ['TYPE' => 'work']
		                      ]
                       ],

      'LANG'        => ['field_name' => 'preferredLanguage']
	],
	
	// If writable is true then these fields need to be populated:
	// group_LDAP_Object_Classes, group_required_fields, group_LDAP_rdn
	'group_LDAP_Object_Classes' => ['groupOfNames'],
	'group_required_fields'     => ['cn', 'member'],
	'group_LDAP_rdn'      	    => 'cn',
	
	// Backend contact field acl. By default no access is denied to any backend field.
	// 'eval' can have following values
	// r (default) - Evaluate 'list' as read only fields
	// w           - Evaluate 'list' as writable fields
	//  'group_field_acl' => 	[ 
	//													'eval' => 'r',
	//													'list' => []
	//												],
	
	// Backend field which points to the contact which is member of this contact group  
	'group_member_map'          => [ 'MEMBER'      => [ 'field_name' => 'member' ] ],
	
	// vCard    => LDAP contact field map (Use primary name of backend field and not their alias name here)
	// To map a composite value property to an individual backend field check conf/vcard_metadata.json for logical 
	// names of the components of a composite value
	// vCard property and the corresponding parameter match should be according to vCard v4.0 specifications only
	'group_fieldmap'            => [     
		 'FN'          => [	'field_name' => 'cn'],
	 	
		 'NOTE'        => [	'field_name' => 'description']
	 ]
];

<?php

$config = [];

$config['sync_database'] = 'sqlite:' . __DATA_DIR__ . '/sync/pdo/sqlite/cards.db';

$config['server']['ldap'] = [
  'host'         				=> '<hostname>',
  'port'          			=> 389,
  'ldap_version'  			=> 3, // using LDAPv3
  'network_timeout' 		=> 10, // The timeout (in seconds) for connect + bind attempts. This is only supported in PHP >= 5.3.0 with OpenLDAP 2.x
  'connection_security'	=> 'none' 	// none (default): No connection security will be established
  																	// secure: Use secure (ldaps) protocol to connect to the server
  																	// starttls: Use starttls protocol for security
];

$config['auth']['ldap'] = [
  // -- The following placeholders are available to be used in bind_dn, bind_pass and search_filter as applicable
  // %u  - Username sent by client for authentication
  // %p  - Password sent by client for authentication
  // %dn - DN as returned by LDAP search for bind authentication
  
  'base_dn'       => 'ou=People,dc=example,dc=org', // Default base DN for searches
  'bind_dn'       => '%dn',
  'bind_pass'     => '%p',
  
  // It's possible to bind to a DN from a search result
  'search_base_dn' => '', // Provide a separate base DN for search if different from 'base_dn' above else leave blank.
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=%u))',   // e.g. '(&(objectClass=posixAccount)(uid=%u))'
  // DN and password to bind as before searching for bind DN, if anonymous search is not allowed
  'search_bind_dn' => 'cn=admin,ou=People,dc=example,dc=org',
  'search_bind_pw' => '<secret>',
  'scope' => 'list' // search mode: sub|base|list
];

$config['principal']['ldap'] = [
  // -- The following placeholders are available to be used in 'search_filter'
  // %u  - Username sent by client for authentication
  
  'base_dn'       => 'ou=People,dc=example,dc=org', // Default base DN for searches
  
  // It's possible to search for principal DN(s)
  'search_base_dn' => '', // Provide a separate base DN for search if different from 'base_dn' above else leave blank.
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=*))',   // Filter criteria for valid principals.
  
  // DN and password to bind as before searching for pricipal DN(s), if anonymous search is not allowed
  'search_bind_dn' => 'cn=admin,ou=People,dc=example,dc=org',
  'search_bind_pw' => '<secret>',
  'scope' => 'list', // search mode: sub|base|list

	// Principal property => LDAP user attribute field map
  'fieldMap' => [	'id' => 'uid', 					// 'id' is the username which is used by the principal (client) to authenticate.
  															 					// Make sure it is mapped to an appropriate user attribute in LDAP which 
  															 					// is unique to the user as per the search criteria above.
  								'displayname' => 'cn', 	// 'displayname' is a commonly used name of the principal.
  								'mail' => 'mail' 				// 'mail' is an email id of the principal.
  							]
];

$config['card']['addressbook']['ldap']['global'] = [
	'name'          	=> 'Global Address Book',
  'description'     => 'Global address book',
    
	// 'user_specific' and 'writable' values are used as initialization parameters for the sync database. 
	// Once the sync database has been initialized changing the values here to any conflicting values will 
	// lead to server not processing requests for this address book.
	'user_specific' 	=> false, // If this is true username placeholder can be used in applicable places
	'writable'     	 	=> false, // If true (default) then new contacts can be created and existing ones can be updated and deleted
	
  // The following placeholders are available to be used in 'base_dn' and 'search_filter' below as applicable
  // %u  - Username sent by client for authentication
  // %dn - DN as returned by LDAP search for address book DN
  
	'base_dn'       	=> 'ou=People,dc=example,dc=org', // Base DN for contact search
	
	// LDAP filter to be used to search for contacts
	'filter'        	=> '(|(objectClass=inetOrgPerson)(objectClass=groupOfNames))',
	
	// Bind user for search/read/write contacts. If 'bind_dn' and 'bind_pass' are not provided below 
	// then LDAP connection using parameters provided in $config['auth']['ldap'] is used to obtain backend data. 
	// This bind user must have read access to entryUUID, createTimestamp and modifyTimestamp operational attributes 
	// of all contacts in the address book additionally.
	'bind_dn'       	=> 'cn=admin,ou=People,dc=example,dc=org',
	'bind_pass'     	=> '<secret>',
	
	// Sync LDAP bind user can be used if there are size limits on 'bind_dn' in LDAP. 'sync_bind_dn' should have 
	// liberal or no size limits and must have read access to entryUUID, createTimestamp and modifyTimestamp 
	// attribute of all contacts in the address book. Access to other contact attributes is not required by this user.
	//  'sync_bind_dn'       => 'cn=carddavsync,ou=People,dc=example,dc=org',
	//  'sync_bind_pw'     	=> '<secret>',
	
	'scope'         => 'list',   // search mode: sub|base|list
	
  // It's possible to find the base of an address book DN from a search result. Useful only if the address book is user specific.
  'search_base_dn' => 'ou=People,dc=example,dc=org',
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=%u))',   // e.g. '(&(objectClass=posixAccount)(uid=%u))'
	'search_scope'   => 'list',   // search mode: sub|base|list
	
	// If writable is true then these fields need to be populated:
	// LDAP_Object_Classes, required_fields, LDAP_rdn
	'LDAP_Object_Classes' => ['inetOrgPerson'],
	'required_fields'     => ['cn', 'sn'],
	'LDAP_rdn'      			=> 'cn',
	'backend_data_update_policy' => 'merge', 	// Backend data update policy. Valid options are below.
																						// merge (default)  - Would only replace backend contact attibutes present in field map here and 
																						//                    leave others intact.
																					 	// replace          - Would replace whole backend contact with attibutes present in 
																					 	//                    field map here. WARNING: This option may lead to loss of contact attributes 
																					 	//                    in the backend which are not present in field map here.
																					 	

	// vCard    => LDAP contact field map
  'fieldmap'      => [
    'FN'            => ['backend_attribute' => 'cn',
                        'backend_data_format' => 'text',
                          'parameters' => [],
                         'reverse_map_parameter_index' => ''],

    'N'							=> ['backend_attribute' => [ 'last_name' => 'sn', 'first_name' => 'givenName'],
                        'backend_data_format' => 'text',
                          'parameters' => [],
                          'reverse_map_parameter_index' => ''],

		'EMAIL'         => ['backend_attribute' => 'mail',
                        'backend_data_format' => 'text',
                          'parameters' => [], 
                          'reverse_map_parameter_index' => ''],

		'ORG'         	=> ['backend_attribute' => [ 'org_name' => 'o', 'org_unit_name' => 'ou'],
                        'backend_data_format' => 'text',
                          'parameters' => [], 
                          'reverse_map_parameter_index' => ''],

    'TITLE'         => ['backend_attribute' => 'title',
                        'backend_data_format' => 'text',
                          'parameters' => [], 
                          'reverse_map_parameter_index' => ''],
    
    'ROLE'        => ['backend_attribute' => 'employeeType',
                      'backend_data_format' => 'text',
                          'parameters' => [], 
                          'reverse_map_parameter_index' => ''],  

    'NICKNAME'      => ['backend_attribute' => 'displayName',
                        'backend_data_format' => 'text',
                          'parameters' => [],  
                          'reverse_map_parameter_index' => ''],

		'PHOTO'         => [['backend_attribute' => 'jpegPhoto',
                        'backend_data_format' => 'binary',
                        'backend_data_mediatype' => ['image/jpeg'],
                            'parameters' => [ ],
                            'reverse_map_parameter_index' => '0']],

    'NOTE'        	=> ['backend_attribute' => 'description',
                        'backend_data_format' => 'text',
                        'parameters' => [],                     
                          'reverse_map_parameter_index' => ''],

    'TEL'						=> [['backend_attribute' => 'homePhone',
                          'backend_data_format' => 'text',
                          'parameters' => [ ['TYPE' => "voice,home", 'PREF' => '1'],
                                            ['TYPE' => "voice,home"],
                                            ['TYPE' => "home"],
                                              null
                                          ],                    
                          'reverse_map_parameter_index' => 0 ],
                          ['backend_attribute' => 'telephoneNumber',
                          'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "voice,work"],
                                            ['TYPE' => "voice,work", 'PREF' => '1'],
                                            ['TYPE' => "work"]
                                          ],                    
                          'reverse_map_parameter_index' => 0 ],
                        ['backend_attribute' => 'fax',
                        'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "voice,fax"],
                                            ['TYPE' => "voice,fax", 'PREF' => '1'],
                                            ['TYPE' => "fax"]
                                      	],                      
                      'reverse_map_parameter_index' => 0],
                      ['backend_attribute' => 'pager',
                      'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "voice,pager"],
                                            ['TYPE' => "voice,pager", 'PREF' => '1'],
                                            ['TYPE' => "pager"]
                                      ],                      
                      'reverse_map_parameter_index' => 0],
                      ['backend_attribute' => 'mobile',
                      'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "voice,cell"],
                          									['TYPE' => "voice,cell", 'PREF' => '1'],
                                            ['TYPE' => "cell"]
                                      ],                      
                      'reverse_map_parameter_index' => 0]],
                     
      'ADR'         => [['backend_attribute' => 'homePostalAddress',
                          'backend_data_format' => 'text',
                          'parameters' => [ ['TYPE' => "home", 'PREF' => '1'],
                                            ['TYPE' => "home"],
                                            ['PREF' => '1'],
                                              null
                                            ],                    
                                        'reverse_map_parameter_index' => 0,
                                        'map_component_separator' => '$' ],
                          ['backend_attribute' => ['po_box'=> 'postOfficeBox','street' => 'street','locality' => 'l','province' => 'st', 'postal_code' => 'postalCode'],
                          'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "work"],
                                            ['TYPE' => "work", 'PREF' => '1'],
                                            ['PREF' => '1']
                                             ],                    
                                  'reverse_map_parameter_index' => 0 ]],

      'LANG'        => [['backend_attribute' => 'preferredLanguage',
                          'backend_data_format' => 'text',
                          'parameters' => [ 'VALUE=language-tag;TYPE="home";PREF=1',
                                            'VALUE=language-tag;TYPE="home"',
                                            'VALUE=language-tag;TYPE="work"',
                                              'TYPE="home"',
                                              'TYPE="work"',
                                              null
                                             ],                    
                                  'reverse_map_parameter_index' => 0 ]],
	],
	
	'group_LDAP_Object_Classes' => ['groupOfNames'],
	'group_required_fields'     => ['cn', 'member'],
	'group_LDAP_rdn'      	    => 'cn',
	'group_member_map'          => [ 'MEMBER'      => [ 'backend_attribute' => 'member' ] ],
	'group_fieldmap'            => [     
																	 'FN'          => [	'backend_attribute' => 'cn',
                                                      'backend_data_format' => 'text',
																											'parameters'    => [],
																									 		'reverse_map_parameter_index' => ''
								                 										],
								                 	
																	 'NOTE'        => [	'backend_attribute' => 'description',
                                                      'backend_data_format' => 'text',
																											'parameters' => [],                     
																											'reverse_map_parameter_index' => ''
																										]
                                 ]
];

$config['card']['addressbook']['ldap']['personal'] = [
	'name'          	=> 'Personal Address Book',
  'description'     => 'Personal address book of the user',

	// 'user_specific' and 'writable' values are used as initialization parameters for the sync database. 
	// Once the sync database has been initialized changing the values here to any conflicting values will 
	// lead to server not processing requests for this address book.
	'user_specific' 	=> true, 	// If this is true username placeholder can be used in applicable places
	'writable'     	 	=> true, 	// If true (default) then new contacts can be created and existing ones can be updated and deleted
	
  // The following placeholders are available to be used in 'base_dn' and 'search_filter' below as applicable
  // %u  - Username sent by client for authentication
  // %dn - DN as returned by LDAP search for address book DN
  
	'base_dn'       	=> 'ou=Address Book,%dn', // Base DN for contact search
	
	// LDAP filter to be used to search for contacts	
	'filter'        	=> '(|(objectClass=inetOrgPerson)(objectClass=groupOfNames))',
	
	// Bind user for search/read/write contacts. If 'bind_dn' and 'bind_pass' are not provided below 
	// then LDAP connection using parameters provided in $config['auth']['ldap'] is used to obtain backend data. 
	// This bind user must have read access to entryUUID, createTimestamp and modifyTimestamp operational attributes 
	// of all contacts in the address book additionally.
	//  'bind_dn'       	=> '',
	//  'bind_pass'     => '',
	
	// Sync LDAP bind user can be used if there are size limits on 'bind_dn' in LDAP. 'sync_bind_dn' should have 
	// liberal or no size limits and must have read access to entryUUID, createTimestamp and modifyTimestamp 
	// attribute of all contacts in the address book. Access to other contact attributes is not required by this user.
	//  'sync_bind_dn'       	=> 'cn=carddavsync,ou=People,dc=example,dc=org',
	//  'sync_bind_pw'     	=> '<secret>',
	
	'scope'         => 'list',   // search mode: sub|base|list
	
  // It's possible to find the base of an address book DN from a search result. Useful only if the address book is user specific.
  'search_base_dn' => 'ou=People,dc=example,dc=org',
  'search_filter'  => '(&(objectclass=inetOrgPerson)(uid=%u))',   // e.g. '(&(objectClass=posixAccount)(uid=%u))'
	'search_scope'   => 'list',   // search mode: sub|base|list

	// If writable is true then these fields need to be populated:
	// LDAP_Object_Classes, required_fields, LDAP_rdn.
	'LDAP_Object_Classes' => ['inetOrgPerson'], //First objectClass must be the structural objectClass.
	'required_fields'     => ['cn', 'sn'],
	'LDAP_rdn'      			=> 'cn',
	'backend_data_update_policy' => 'merge', 	// Backend data update policy. Valid options are below.
																						// merge (default)  - Would only replace backend contact attibutes present in field map here and 
																						//                    leave others intact.
																					 	// replace          - Would replace whole backend contact with attibutes present in 
																					 	//                    field map here. WARNING: This option may lead to loss of contact attributes 
																					 	//                    in the backend which are not present in field map here.

	// vCard    => LDAP field map
  'fieldmap'      => [
    'FN'            => ['backend_attribute' => 'cn',
                        'backend_data_format' => 'text',
                          'parameters' => [],
                         'reverse_map_parameter_index' => ''],

    'N'							=> ['backend_attribute' => [ 'last_name' => 'sn', 'first_name' => 'givenName'],
                        'backend_data_format' => 'text',
                          'parameters' => [],
                          'reverse_map_parameter_index' => ''],

		'EMAIL'         => ['backend_attribute' => 'mail',
                        'backend_data_format' => 'text',
                          'parameters' => [], 
                          'reverse_map_parameter_index' => ''],

		'ORG'         	=> ['backend_attribute' => [ 'org_name' => 'o', 'org_unit_name' => 'ou'],
                        'backend_data_format' => 'text',
                          'parameters' => [], 
                          'reverse_map_parameter_index' => ''],

    'TITLE'         => ['backend_attribute' => 'title',
                        'backend_data_format' => 'text',
                          'parameters' => [], 
                          'reverse_map_parameter_index' => ''],
    
    'ROLE'        => ['backend_attribute' => 'employeeType',
                      'backend_data_format' => 'text',
                          'parameters' => [], 
                          'reverse_map_parameter_index' => ''],  

    'NICKNAME'      => ['backend_attribute' => 'displayName',
                        'backend_data_format' => 'text',
                          'parameters' => [],  
                          'reverse_map_parameter_index' => ''],

		'PHOTO'         => [['backend_attribute' => 'jpegPhoto',
                        'backend_data_format' => 'binary',
                        'backend_data_mediatype' => ['image/jpeg'],
                            'parameters' => [ ],
                            'reverse_map_parameter_index' => '0']],

    'NOTE'        	=> ['backend_attribute' => 'description',
                        'backend_data_format' => 'text',
                        'parameters' => [],                     
                          'reverse_map_parameter_index' => ''],

    'TEL'						=> [['backend_attribute' => 'homePhone',
                          'backend_data_format' => 'text',
                          'parameters' => [ ['TYPE' => "voice,home", 'PREF' => '1'],
                                            ['TYPE' => "voice,home"],
                                            ['TYPE' => "home"],
                                              null
                                          ],                    
                          'reverse_map_parameter_index' => 0 ],
                          ['backend_attribute' => 'telephoneNumber',
                          'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "voice,work"],
                                            ['TYPE' => "voice,work", 'PREF' => '1'],
                                            ['TYPE' => "work"]
                                          ],                    
                          'reverse_map_parameter_index' => 0 ],
                        ['backend_attribute' => 'fax',
                        'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "voice,fax"],
                                            ['TYPE' => "voice,fax", 'PREF' => '1'],
                                            ['TYPE' => "fax"]
                                      	],                      
                      'reverse_map_parameter_index' => 0],
                      ['backend_attribute' => 'pager',
                      'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "voice,pager"],
                                            ['TYPE' => "voice,pager", 'PREF' => '1'],
                                            ['TYPE' => "pager"]
                                      ],                      
                      'reverse_map_parameter_index' => 0],
                      ['backend_attribute' => 'mobile',
                      'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "voice,cell"],
                          									['TYPE' => "voice,cell", 'PREF' => '1'],
                                            ['TYPE' => "cell"]
                                      ],                      
                      'reverse_map_parameter_index' => 0]],
                     
      'ADR'         => [['backend_attribute' => 'homePostalAddress',
                          'backend_data_format' => 'text',
                          'parameters' => [ ['TYPE' => "home", 'PREF' => '1'],
                                            ['TYPE' => "home"],
                                            ['PREF' => '1'],
                                              null
                                            ],                    
                                        'reverse_map_parameter_index' => 0,
                                        'map_component_separator' => '$' ],
                          ['backend_attribute' => ['po_box'=> 'postOfficeBox','street' => 'street','locality' => 'l','province' => 'st', 'postal_code' => 'postalCode'],
                          'backend_data_format' => 'text',
                          'parameters' => [ 
                          									['TYPE' => "work"],
                                            ['TYPE' => "work", 'PREF' => '1'],
                                            ['PREF' => '1']
                                             ],                    
                                  'reverse_map_parameter_index' => 0 ]],

      'LANG'        => [['backend_attribute' => 'preferredLanguage',
                          'backend_data_format' => 'text',
                          'parameters' => [ 'VALUE=language-tag;TYPE="home";PREF=1',
                                            'VALUE=language-tag;TYPE="home"',
                                            'VALUE=language-tag;TYPE="work"',
                                              'TYPE="home"',
                                              'TYPE="work"',
                                              null
                                             ],                    
                                  'reverse_map_parameter_index' => 0 ]],
	],
	
	'group_LDAP_Object_Classes' => ['groupOfNames'],
	'group_required_fields'     => ['cn', 'member'],
	'group_LDAP_rdn'      	    => 'cn',
	'group_member_map'          => [ 'MEMBER'      => [ 'backend_attribute' => 'member' ] ],
	'group_fieldmap'            => [     
																	 'FN'          => [	'backend_attribute' => 'cn',
                                                      'backend_data_format' => 'text',
																											'parameters'    => [],
																									 		'reverse_map_parameter_index' => ''
								                 										],
								                 	
																	 'NOTE'        => [	'backend_attribute' => 'description',
                                                      'backend_data_format' => 'text',
																											'parameters' => [],                     
																											'reverse_map_parameter_index' => ''
																										]
                                 ]
];
